// Place your key bindings in this file to override the defaults
[
  /*
   * These keybindings are for the vim motions
   */
  // navigation
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown"
  },
  // show all editors
  {
    "key": "space ,",
    "command": "workbench.action.showAllEditors",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  // toggle sidebar
  {
    "key": "cmd+b",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  // switch between tabs
  {
    "key": "tab",
    "command": "workbench.action.nextEditorInGroup",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "shift+tab",
    "command": "workbench.action.previousEditorInGroup",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },
  // move selected lines
  {
    "key": "shift+j",
    "command": "editor.action.moveLinesDownAction",
    "when": "vim.mode !== 'Insert' && editorTextFocus"
  },
  {
    "key": "shift+k",
    "command": "editor.action.moveLinesUpAction",
    "when": "vim.mode !== 'Insert' && editorTextFocus"
  },
  // show hover
  {
    "key": "shift+k",
    "command": "editor.action.showHover",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  // open code action menu
  {
    "key": "space c a",
    "command": "editor.action.codeAction",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  // f2 to rename symbols
  {
    "key": "space c r",
    "command": "editor.action.rename",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  // open search file by name
  {
    "key": "space space",
    "command": "workbench.action.quickOpen",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  // go to definition
  {
    "key": "space g d",
    "command": "editor.action.revealDefinition",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  // go to references
  {
    "key": "space g r",
    "command": "editor.action.goToReferences",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  // open global search
  {
    "key": "space g s",
    "command": "workbench.action.findInFiles",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  // sideba views
  // open git source control panel
  {
    "key": "space g f",
    "command": "workbench.view.explorer",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  // select occurances one by one
  {
    "key": "ctrl+n",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },
  /*
   * side panels
   */
  // select item in the side bar
  {
    "key": "v",
    "command": "list.selectAndPreserveFocus",
    "when": "sideBarFocus && !inputFocus"
  },
  // file explorer bindings
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "c",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "s",
    "command": "explorer.openToSide",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "v",
    "command": "list.select",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "enter",
    "command": "explorer.openAndPassFocus",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "shift+s",
    "command": "runCommands",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
    "args": {
      "commands": [
        "workbench.action.splitEditorDown",
        "explorer.openAndPassFocus",
        "workbench.action.closeOtherEditors"
      ]
    }
  },
  // git source control panel bindings
  {
    "key": "space g g",
    "command": "runCommands",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)",
    "args": {
      "commands": ["workbench.view.scm"]
    }
  },
  // git stage the selected file
  {
    "key": "enter",
    "command": "git.openFile",
    // https://code.visualstudio.com/api/references/when-clause-contexts#visible-view-container-when-clause-context
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "key": "i",
    "command": "runCommands",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus",
    "args": {
      "commands": ["list.focusFirst", "list.select"]
    }
  },
  {
    "key": "escape",
    "command": "runCommands",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && inputFocus",
    "args": {
      "commands": ["list.focusDown"]
    }
  },
  {
    "key": "s",
    "command": "runCommands",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus",
    "args": {
      "commands": [
        "git.stage",
        "list.focusAnyUp",
        "list.selectAndPreserveFocus"
      ]
    }
  },
  {
    "key": "shift+s",
    "command": "runCommands",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus",
    "args": {
      "commands": [
        "git.unstage",
        "list.focusAnyUp",
        "list.selectAndPreserveFocus"
      ]
    }
  },
  {
    "key": "e",
    "command": "git.stageAll",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "key": "shift+e",
    "command": "git.unstageAll",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  // vscode extension side bar
  {
    "key": "space g e",
    "command": "runCommands",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)",
    "args": {
      "commands": ["workbench.view.extensions"]
    }
  },
  {
    "key": "i",
    "command": "runCommands",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.extensions' && !inputFocus",
    "args": {
      "commands": ["workbench.extensions.search"]
    }
  },
  {
    "key": "enter",
    "command": "runCommands",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.extensions' && !inputFocus",
    "args": {
      "commands": ["workbench.extensions.installExtension"]
    }
  },
  // NOTE: this is not working
  {
    "key": "escape",
    "command": "runCommands",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.extensions' && inputFocus",
    "args": {
      "commands": ["list.focusDown"]
    }
  },
  // to prioritize the "cmd+i" keybinding for the "editor.action.triggerSuggest" command over the Github copilot inline chat start keybinding
  {
    "key": "cmd+i",
    "command": "editor.action.triggerSuggest",
    "when": "editorFocus && editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "key": "cmd+i",
    "command": "-editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "key": "cmd+i",
    "command": "-inlineChat.startWithCurrentLine",
    "when": "editorFocus && github.copilot.chat.editor.enableLineTrigger && inlineChatHasProvider && !editorReadonly && !inlineChatVisible"
  },
  {
    "key": "cmd+e",
    "command": "-actions.findWithSelection"
  }
]
